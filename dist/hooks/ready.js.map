{"version":3,"sources":["hooks/ready.ts"],"names":[],"mappings":"AAAA,OAAO,qBAAqB,yCAAsC;AAElE,6BAA6B;AAC7B,MAAM,gBAAgB,GAAG,KAAK,IAAuB,EAAE;IACrD,IAAI,WAAW,GAAY,IAAI,KAAK,CAAC;IACrC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAmB,EAAE,GAAW,EAAE,IAA8B,EAAE,EAAE;QACxF,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC,CAAC,CAAA;IACF,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACjC,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AACF,0CAA0C;AAC1C,8EAA8E;AAC9E,MAAM,SAAS,GAAG,CAAC,WAAoB,EAAS,EAAE;IAChD,IAAI,SAAgB,CAAC;IACrB,IAAI,KAAY,CAAC;IACjB,OAAM,CAAC,SAAS,EAChB;QACE,MAAM,CAAC,GAAU,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC9D,MAAM,SAAS,GAAU,WAAW,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC;YAAE,SAAS,GAAG,SAAS,CAAC;KACtE;IAED,OAAM,CAAC,KAAK,EACZ;QACE,MAAM,CAAC,GAAU,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACzG,IAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC;YAAE,KAAK,GAAG,CAAC,CAAC;KACzD;IAGD,OAAO,wCAAwC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC;KACxF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,SAAS,IAAI,KAAK,EAAE,CAAC;CACpD,CAAC;AACF,CAAC,CAAC;AAEF,8BAA8B;AAC9B,MAAM,SAAS,GAAG,GAAS,EAAE;IAC3B,IAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,UAAU,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,uBAAuB,CAAC,EAAC;QACzG,qBAAqB,EAAE,CAAC;QACxB,kBAAkB;QAClB,gBAAgB,EAAE;aACf,IAAI,CAAC,CAAC,WAAoB,EAAE,EAAE;YAC7B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;QAC9D,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,sCAAsC;YACtC,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACrD,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;KACN;AACH,CAAC,CAAC;AAEF,eAAe,SAAS,CAAC","file":"ready.js","sourcesContent":["import registerNotifications from \"../notifications/Notification\";\n\n// fetches a tip from the API\nconst fetchPackageList = async (): Promise<string[]> => {\n  let packageList:string[] = new Array;\n  game.modules.forEach((_value: Game.Module, key: string, _map: Map<string, Game.Module>) => {\n    packageList.push(key);\n  })\n  packageList.push(game.system.id);\n  return packageList;\n};\n// ${tip.message.replace(/\\\\n/g, \"<br/>\")}\n/* <div class=\"didyouknow author\"><span class=\"name\">${tip.id}</span></div> */\nconst formatTip = (packageList:string[]):string => {\n  let packageID:string;\n  let tipID:number;\n  while(!packageID)\n  {\n    const i:number = Math.floor(Math.random()*packageList.length);\n    const candidate:string = packageList.splice(i,1)[0];\n    if (game.i18n.translations[\"TIPS\"][candidate]) packageID = candidate;\n  }\n\n  while(!tipID)\n  {\n    const i:number = Math.floor(Math.random()*Object.keys(game.i18n.translations[\"TIPS\"][packageID]).length);\n    if(game.i18n.translations[\"TIPS\"][packageID]) tipID = i;\n  }\n \n\n  return `<h3><i class=\"fas fa-lightbulb\"></i> ${game.i18n.localize(\"FOUNDRYTIPS.didyouknow\")}</h3>\n<p>${game.i18n.localize(`TIPS.${packageID}.${tipID}`)}</p>\n`;\n};\n\n// displays a fetched tip once\nconst onceReady = (): void => {\n  if(game.user.data.role >= CONST.USER_ROLES.ASSISTANT || game.settings.get(\"tips\", \"show-everyone-gm-tips\")){\n    registerNotifications();\n    // fetch a new tip\n    fetchPackageList()\n      .then((packageList:string[]) => {\n        window.vtta.notification.show(formatTip(packageList), null);\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.warn(\"Unable to display tip, fetch failed.\");\n        console.error(err);\n      });\n  }\n};\n\nexport default onceReady;\n"]}