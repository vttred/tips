{"version":3,"sources":["hooks/ready.ts"],"names":[],"mappings":"AAAA,OAAO,qBAAqB,yCAAsC;AAClE,OAAO,EAAE,OAAO,EAAE,8BAA2B;AAE7C,6BAA6B;AAC7B,MAAM,gBAAgB,GAAG,KAAK,IAAuB,EAAE;IACrD,IAAI,WAAW,GAAa,EAAE,CAAC;IAC/B,OAAO,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;QACxC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IACH,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACtC,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AAEF,kBAAkB;AAClB,MAAM,SAAS,GAAG,CAAC,WAAqB,EAAU,EAAE;IAClD,IAAI,SAAS,GAAkB,IAAI,CAAC;IACpC,IAAI,KAAK,GAAkB,IAAI,CAAC;IAChC,OAAO,CAAC,SAAS,EAAE;QACjB,MAAM,CAAC,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QACjE,MAAM,SAAS,GAAW,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,IAAI,OAAO,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC;YAAE,SAAS,GAAG,SAAS,CAAC;KAC3E;IAED,OAAO,CAAC,KAAK,EAAE;QACb,MAAM,CAAC,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACjH,IAAI,OAAO,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC;YAAE,KAAK,GAAG,CAAC,CAAC;KAC/D;IAED,OAAO,wCAAwC,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC;KAC7F,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,SAAS,IAAI,KAAK,EAAE,CAAC;CACzD,CAAC;AACF,CAAC,CAAC;AAEF,8BAA8B;AAC9B,MAAM,SAAS,GAAG,GAAS,EAAE;;IAC3B,IACE,CAAC,MAAA,OAAO,EAAE,CAAC,IAAI,0CAAE,IAAI,CAAC,IAAe,KAAI,KAAK,CAAC,UAAU,CAAC,SAAS;QACnE,OAAO,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,uBAAuB,CAAC,EACvD;QACA,qBAAqB,EAAE,CAAC;QACxB,kBAAkB;QAClB,gBAAgB,EAAE;aACf,IAAI,CAAC,CAAC,WAAqB,EAAE,EAAE;;YAC9B,MAAA,MAAA,MAAM,CAAC,IAAI,CAAC,YAAY,EAAC,IAAI,mDAAG,SAAS,CAAC,WAAW,CAAC,EAAE;QAC1D,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACrD,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;KACN;AACH,CAAC,CAAC;AAIF,eAAe,SAAS,CAAC","file":"ready.js","sourcesContent":["import registerNotifications from \"../notifications/Notification\";\nimport { getGame } from \"../scripts/getGame\";\n\n// fetches a tip from the API\nconst fetchPackageList = async (): Promise<string[]> => {\n  let packageList: string[] = [];\n  getGame().modules.forEach((_value, key) => {\n    packageList.push(key);\n  });\n  packageList.push(getGame().system.id);\n  return packageList;\n};\n\n// formats the tip\nconst formatTip = (packageList: string[]): string => {\n  let packageID: string | null = null;\n  let tipID: number | null = null;\n  while (!packageID) {\n    const i: number = Math.floor(Math.random() * packageList.length);\n    const candidate: string = packageList.splice(i, 1)[0];\n    if (getGame().i18n.translations[\"TIPS\"][candidate]) packageID = candidate;\n  }\n\n  while (!tipID) {\n    const i: number = Math.floor(Math.random() * Object.keys(getGame().i18n.translations[\"TIPS\"][packageID]).length);\n    if (getGame().i18n.translations[\"TIPS\"][packageID]) tipID = i;\n  }\n\n  return `<h3><i class=\"fas fa-lightbulb\"></i> ${getGame().i18n.localize(\"FOUNDRYTIPS.didyouknow\")}</h3>\n<p>${getGame().i18n.localize(`TIPS.${packageID}.${tipID}`)}</p>\n`;\n};\n\n// displays a fetched tip once\nconst onceReady = (): void => {\n  if (\n    (getGame().user?.data.role as number) >= CONST.USER_ROLES.ASSISTANT ||\n    getGame().settings.get(\"tips\", \"show-everyone-gm-tips\")\n  ) {\n    registerNotifications();\n    // fetch a new tip\n    fetchPackageList()\n      .then((packageList: string[]) => {\n        window.vtta.notification.show?.(formatTip(packageList));\n      })\n      .catch((err) => {\n        console.warn(\"Unable to display tip, fetch failed.\");\n        console.error(err);\n      });\n  }\n};\n\ntype Foo = typeof window[\"vtta\"][\"notification\"][\"show\"];\n\nexport default onceReady;\n"]}